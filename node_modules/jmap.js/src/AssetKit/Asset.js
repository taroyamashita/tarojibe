(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod);
    global.Asset = mod.exports;
  }
})(this, function (module) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var ITEMNAME = 'Asset';

  var _global = global || window;

  var Asset = function (_global$jungle$Moving) {
    _inherits(Asset, _global$jungle$Moving);

    /**
     * @access public
     * @param {assetConfig} [assetConfig] - The configuration object for the asset
     * @desc Creates a new Asset
     */
    function Asset() {
      var assetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var assetKit = arguments[1];

      _classCallCheck(this, Asset);

      var _this = _possibleConstructorReturn(this, (Asset.__proto__ || Object.getPrototypeOf(Asset)).call(this, assetConfig));

      _this.constructor = _global.jungle.MovingObject;
      _this.baseTypeName = ITEMNAME;
      _this._type = assetConfig.type || '_default';
      _this.assetKit = assetKit;
      _this.animationQueue = [];
      _this.watched = false;
      return _this;
    }

    _createClass(Asset, [{
      key: 'isAsset',
      value: function isAsset() {
        return this.constructor === global.jungle.MovingObject && this.baseTypeName === 'Asset';
      }
    }]);

    return Asset;
  }(_global.jungle.MovingObject);

  module.exports = Asset;
});
//# sourceMappingURL=Asset.js.map