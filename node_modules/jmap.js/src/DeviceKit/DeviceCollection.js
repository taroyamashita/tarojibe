(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', './Device'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, require('./Device'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, global.Device);
    global.DeviceCollection = mod.exports;
  }
})(this, function (module, Device) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var DeviceCollection = function (_global$jmap$core$Bas) {
    _inherits(DeviceCollection, _global$jmap$core$Bas);

    /**
     * Create a collection of Devices.
     */
    function DeviceCollection() {
      _classCallCheck(this, DeviceCollection);

      return _possibleConstructorReturn(this, (DeviceCollection.__proto__ || Object.getPrototypeOf(DeviceCollection)).call(this, Device));
    }

    /**
     * Returns a boolean for weather or not argument is constructed as an Device object
     * @param {Object} item - Item to evaluate
     * @return {Boolean} Boolean based on evaluation result
     */


    _createClass(DeviceCollection, [{
      key: 'isDevice',
      value: function isDevice(item) {
        return this.isCollectionItemType(item);
      }
    }, {
      key: 'getByName',
      value: function getByName() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

        return this.filter(function (a) {
          return a.name === name.toLowerCase();
        });
      }
    }, {
      key: 'getByWaypoint',
      value: function getByWaypoint() {
        var waypoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return this.filter(function (a) {
          return a.locations.getByWaypointId(waypoint.id);
        });
      }
    }, {
      key: 'getByMap',
      value: function getByMap() {
        var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return this.filter(function (a) {
          return a.locations.getByMapId(map.id);
        });
      }
    }]);

    return DeviceCollection;
  }(global.jmap.core.BaseCollection);

  module.exports = DeviceCollection;
});
//# sourceMappingURL=DeviceCollection.js.map