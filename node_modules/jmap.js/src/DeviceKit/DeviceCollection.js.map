{"version":3,"sources":["../src/DeviceCollection.js"],"names":["Device","DeviceCollection","item","isCollectionItemType","name","filter","a","toLowerCase","waypoint","locations","getByWaypointId","id","map","getByMapId","global","jmap","core","BaseCollection","module","exports"],"mappings":";;sBAAuB,U;;4BAAA,U;;;;;;;;2BAAjBA,M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMAC,gB;;;AACJ;;;AAGA,gCAAc;AAAA;;AAAA,iIACND,MADM;AAEb;;AAED;;;;;;;;;+BAKSE,I,EAAM;AACb,eAAO,KAAKC,oBAAL,CAA0BD,IAA1B,CAAP;AACD;;;kCAOoB;AAAA,YAAXE,IAAW,uEAAJ,EAAI;;AACnB,eAAO,KAAKC,MAAL,CAAY;AAAA,iBAAKC,EAAEF,IAAF,KAAWA,KAAKG,WAAL,EAAhB;AAAA,SAAZ,CAAP;AACD;;;sCAO4B;AAAA,YAAfC,QAAe,uEAAJ,EAAI;;AAC3B,eAAO,KAAKH,MAAL,CAAY;AAAA,iBAAKC,EAAEG,SAAF,CAAYC,eAAZ,CAA4BF,SAASG,EAArC,CAAL;AAAA,SAAZ,CAAP;AACD;;;iCAOkB;AAAA,YAAVC,GAAU,uEAAJ,EAAI;;AACjB,eAAO,KAAKP,MAAL,CAAY;AAAA,iBAAKC,EAAEG,SAAF,CAAYI,UAAZ,CAAuBD,IAAID,EAA3B,CAAL;AAAA,SAAZ,CAAP;AACD;;;;IA1C4BG,OAAOC,IAAP,CAAYC,IAAZ,CAAiBC,c;;AA+ChDC,SAAOC,OAAP,GAAiBlB,gBAAjB","file":"DeviceCollection.js","sourcesContent":["const Device = require('./Device')\n\n/**\n* Class representing a collection of Devices.\n* @extends jmap.core.BaseCollection\n*/\nclass DeviceCollection extends global.jmap.core.BaseCollection {\n  /**\n   * Create a collection of Devices.\n   */\n  constructor() {\n    super(Device)\n  }\n\n  /**\n   * Returns a boolean for weather or not argument is constructed as an Device object\n   * @param {Object} item - Item to evaluate\n   * @return {Boolean} Boolean based on evaluation result\n   */\n  isDevice(item) {\n    return this.isCollectionItemType(item)\n  }\n\n  /**\n   * Get a specific set of devices belonging to a waypoint\n   * @param {String} name - A device name\n   * @return {Array} an array of devices\n   */\n  getByName(name = '') {\n    return this.filter(a => a.name === name.toLowerCase())\n  }\n\n  /**\n   * Get a specific set of devices belonging to a waypoint\n   * @param {jmap.core.Waypoint} waypoint - Any waypoint to query with\n   * @return {Array} an array of devices\n   */\n  getByWaypoint(waypoint = {}) {\n    return this.filter(a => a.locations.getByWaypointId(waypoint.id))\n  }\n\n  /**\n   * Get a specific set of devices belonging to a map\n   * @param {jmap.core.Map} map - Any map to query with\n   * @return {Array} an array of devices\n   */\n  getByMap(map = {}) {\n    return this.filter(a => a.locations.getByMapId(map.id))\n  }\n\n\n}\n\nmodule.exports = DeviceCollection\n"]}