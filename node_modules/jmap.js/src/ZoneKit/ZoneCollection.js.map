{"version":3,"sources":["../src/ZoneCollection.js"],"names":["Zone","ZoneCollection","item","isCollectionItemType","name","filter","a","toLowerCase","waypoint","z","getLocations","find","l","waypointIds","indexOf","id","map","mapId","global","jmap","core","BaseCollection","module","exports"],"mappings":";;sBAAqB,W;;4BAAA,W;;;;;;;;2BAAfA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMAC,c;;;AACJ;;;AAGA,8BAAc;AAAA;;AAAA,6HACND,IADM;AAEb;;AAED;;;;;;;;;6BAKOE,I,EAAM;AACX,eAAO,KAAKC,oBAAL,CAA0BD,IAA1B,CAAP;AACD;;;gCAWSE,I,EAAM;AACd,eAAO,KAAKC,MAAL,CAAY;AAAA,iBAAKC,EAAEF,IAAF,KAAWA,KAAKG,WAAL,EAAhB;AAAA,SAAZ,CAAP;AACD;;;sCAW4B;AAAA,YAAfC,QAAe,uEAAJ,EAAI;;AAC3B,eAAO,KAAKH,MAAL,CAAY;AAAA,iBAAKI,EAAEC,YAAF,GAAiBC,IAAjB,CAAsB;AAAA,mBAAKC,EAAEC,WAAF,CAAcC,OAAd,CAAsBN,SAASO,EAA/B,IAAqC,CAAC,CAA3C;AAAA,WAAtB,CAAL;AAAA,SAAZ,CAAP;AACD;;;iCAWkB;AAAA,YAAVC,GAAU,uEAAJ,EAAI;;AACjB,eAAO,KAAKX,MAAL,CAAY;AAAA,iBAAKI,EAAEC,YAAF,GAAiBC,IAAjB,CAAsB;AAAA,mBAAKC,EAAEK,KAAF,KAAYD,IAAID,EAArB;AAAA,WAAtB,CAAL;AAAA,SAAZ,CAAP;AACD;;;;IAtD0BG,OAAOC,IAAP,CAAYC,IAAZ,CAAiBC,c;;AA0D9CC,SAAOC,OAAP,GAAiBtB,cAAjB","file":"ZoneCollection.js","sourcesContent":["const Zone = require('./Zone.js')\n\n/**\n* Class representing a collection of Devices.\n* @extends jmap.core.BaseCollection\n*/\nclass ZoneCollection extends global.jmap.core.BaseCollection {\n  /**\n   * Create a collection of Devices.\n   */\n  constructor() {\n    super(Zone)\n  }\n\n  /**\n   * Returns a boolean for whather or not argument is constructed as an Device object\n   * @param {Object} item - Item to evaluate\n   * @return {Boolean} Boolean based on evaluation result\n   */\n  isZone(item) {\n    return this.isCollectionItemType(item)\n  }\n\n  /**\n   * @access public\n   * @desc - Returns Zone/s by their name (or returns an empty array)\n   * @param {string} name - The name of the desired Zone/s\n   * @return {Zone[]} - The desired Zone/s (or an empty array if name is invalid)\n   * @example\n   * const name = 'Food Court'\n   * const zone = getByName(name)\n   */\n  getByName(name) {\n    return this.filter(a => a.name === name.toLowerCase())\n  }\n\n  /**\n   * @access public\n   * @desc - Returns Zone/s by a given waypoint (or returns an empty array)\n   * @param {Waypoint} waypoint - The waypoint to search with\n   * @return {Zone[]} - The desired Zone/s (or an empty array if waypoint is invalid)\n   * @example\n   * const waypoint = control.currentMap.waypoints[0]\n   * const zone = getByWaypoint(waypoint)\n   */\n  getByWaypoint(waypoint = {}) {\n    return this.filter(z => z.getLocations().find(l => l.waypointIds.indexOf(waypoint.id) > -1))\n  }\n\n  /**\n   * @access public\n   * @desc - Returns Zone/s by a given map (or returns an empty array)\n   * @param {Map} map - The map on which we're searching\n   * @return {Zone[]} - The desired Zone/s (or an empty array if map is invalid)\n   * @example\n   * const map = control.currentMap\n   * const zone = getByMap(map)\n   */\n  getByMap(map = {}) {\n    return this.filter(z => z.getLocations().find(l => l.mapId === map.id))\n  }\n\n}\n\nmodule.exports = ZoneCollection\n"]}